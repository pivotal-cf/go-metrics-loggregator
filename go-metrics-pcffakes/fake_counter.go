// Copyright (C) 2017-Present Pivotal Software, Inc. All rights reserved.
//
// This program and the accompanying materials are made available under
// the terms of the under the Apache License, Version 2.0 (the "License‚Äù);
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was generated by counterfeiter
package gometricspcffakes

import (
	"sync"

	"github.com/rcrowley/go-metrics"
)

type FakeCounter struct {
	ClearStub        func()
	clearMutex       sync.RWMutex
	clearArgsForCall []struct{}
	CountStub        func() int64
	countMutex       sync.RWMutex
	countArgsForCall []struct{}
	countReturns     struct {
		result1 int64
	}
	countReturnsOnCall map[int]struct {
		result1 int64
	}
	DecStub        func(int64)
	decMutex       sync.RWMutex
	decArgsForCall []struct {
		arg1 int64
	}
	IncStub        func(int64)
	incMutex       sync.RWMutex
	incArgsForCall []struct {
		arg1 int64
	}
	SnapshotStub        func() metrics.Counter
	snapshotMutex       sync.RWMutex
	snapshotArgsForCall []struct{}
	snapshotReturns     struct {
		result1 metrics.Counter
	}
	snapshotReturnsOnCall map[int]struct {
		result1 metrics.Counter
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCounter) Clear() {
	fake.clearMutex.Lock()
	fake.clearArgsForCall = append(fake.clearArgsForCall, struct{}{})
	fake.recordInvocation("Clear", []interface{}{})
	fake.clearMutex.Unlock()
	if fake.ClearStub != nil {
		fake.ClearStub()
	}
}

func (fake *FakeCounter) ClearCallCount() int {
	fake.clearMutex.RLock()
	defer fake.clearMutex.RUnlock()
	return len(fake.clearArgsForCall)
}

func (fake *FakeCounter) Count() int64 {
	fake.countMutex.Lock()
	ret, specificReturn := fake.countReturnsOnCall[len(fake.countArgsForCall)]
	fake.countArgsForCall = append(fake.countArgsForCall, struct{}{})
	fake.recordInvocation("Count", []interface{}{})
	fake.countMutex.Unlock()
	if fake.CountStub != nil {
		return fake.CountStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.countReturns.result1
}

func (fake *FakeCounter) CountCallCount() int {
	fake.countMutex.RLock()
	defer fake.countMutex.RUnlock()
	return len(fake.countArgsForCall)
}

func (fake *FakeCounter) CountReturns(result1 int64) {
	fake.CountStub = nil
	fake.countReturns = struct {
		result1 int64
	}{result1}
}

func (fake *FakeCounter) CountReturnsOnCall(i int, result1 int64) {
	fake.CountStub = nil
	if fake.countReturnsOnCall == nil {
		fake.countReturnsOnCall = make(map[int]struct {
			result1 int64
		})
	}
	fake.countReturnsOnCall[i] = struct {
		result1 int64
	}{result1}
}

func (fake *FakeCounter) Dec(arg1 int64) {
	fake.decMutex.Lock()
	fake.decArgsForCall = append(fake.decArgsForCall, struct {
		arg1 int64
	}{arg1})
	fake.recordInvocation("Dec", []interface{}{arg1})
	fake.decMutex.Unlock()
	if fake.DecStub != nil {
		fake.DecStub(arg1)
	}
}

func (fake *FakeCounter) DecCallCount() int {
	fake.decMutex.RLock()
	defer fake.decMutex.RUnlock()
	return len(fake.decArgsForCall)
}

func (fake *FakeCounter) DecArgsForCall(i int) int64 {
	fake.decMutex.RLock()
	defer fake.decMutex.RUnlock()
	return fake.decArgsForCall[i].arg1
}

func (fake *FakeCounter) Inc(arg1 int64) {
	fake.incMutex.Lock()
	fake.incArgsForCall = append(fake.incArgsForCall, struct {
		arg1 int64
	}{arg1})
	fake.recordInvocation("Inc", []interface{}{arg1})
	fake.incMutex.Unlock()
	if fake.IncStub != nil {
		fake.IncStub(arg1)
	}
}

func (fake *FakeCounter) IncCallCount() int {
	fake.incMutex.RLock()
	defer fake.incMutex.RUnlock()
	return len(fake.incArgsForCall)
}

func (fake *FakeCounter) IncArgsForCall(i int) int64 {
	fake.incMutex.RLock()
	defer fake.incMutex.RUnlock()
	return fake.incArgsForCall[i].arg1
}

func (fake *FakeCounter) Snapshot() metrics.Counter {
	fake.snapshotMutex.Lock()
	ret, specificReturn := fake.snapshotReturnsOnCall[len(fake.snapshotArgsForCall)]
	fake.snapshotArgsForCall = append(fake.snapshotArgsForCall, struct{}{})
	fake.recordInvocation("Snapshot", []interface{}{})
	fake.snapshotMutex.Unlock()
	if fake.SnapshotStub != nil {
		return fake.SnapshotStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.snapshotReturns.result1
}

func (fake *FakeCounter) SnapshotCallCount() int {
	fake.snapshotMutex.RLock()
	defer fake.snapshotMutex.RUnlock()
	return len(fake.snapshotArgsForCall)
}

func (fake *FakeCounter) SnapshotReturns(result1 metrics.Counter) {
	fake.SnapshotStub = nil
	fake.snapshotReturns = struct {
		result1 metrics.Counter
	}{result1}
}

func (fake *FakeCounter) SnapshotReturnsOnCall(i int, result1 metrics.Counter) {
	fake.SnapshotStub = nil
	if fake.snapshotReturnsOnCall == nil {
		fake.snapshotReturnsOnCall = make(map[int]struct {
			result1 metrics.Counter
		})
	}
	fake.snapshotReturnsOnCall[i] = struct {
		result1 metrics.Counter
	}{result1}
}

func (fake *FakeCounter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.clearMutex.RLock()
	defer fake.clearMutex.RUnlock()
	fake.countMutex.RLock()
	defer fake.countMutex.RUnlock()
	fake.decMutex.RLock()
	defer fake.decMutex.RUnlock()
	fake.incMutex.RLock()
	defer fake.incMutex.RUnlock()
	fake.snapshotMutex.RLock()
	defer fake.snapshotMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCounter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ metrics.Counter = new(FakeCounter)
