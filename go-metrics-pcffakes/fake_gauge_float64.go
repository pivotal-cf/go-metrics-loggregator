// Copyright (C) 2017-Present Pivotal Software, Inc. All rights reserved.
//
// This program and the accompanying materials are made available under
// the terms of the under the Apache License, Version 2.0 (the "License‚Äù);
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was generated by counterfeiter
package gometricspcffakes

import (
	"sync"

	"github.com/rcrowley/go-metrics"
)

type FakeGaugeFloat64 struct {
	SnapshotStub        func() metrics.GaugeFloat64
	snapshotMutex       sync.RWMutex
	snapshotArgsForCall []struct{}
	snapshotReturns     struct {
		result1 metrics.GaugeFloat64
	}
	snapshotReturnsOnCall map[int]struct {
		result1 metrics.GaugeFloat64
	}
	UpdateStub        func(float64)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 float64
	}
	ValueStub        func() float64
	valueMutex       sync.RWMutex
	valueArgsForCall []struct{}
	valueReturns     struct {
		result1 float64
	}
	valueReturnsOnCall map[int]struct {
		result1 float64
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGaugeFloat64) Snapshot() metrics.GaugeFloat64 {
	fake.snapshotMutex.Lock()
	ret, specificReturn := fake.snapshotReturnsOnCall[len(fake.snapshotArgsForCall)]
	fake.snapshotArgsForCall = append(fake.snapshotArgsForCall, struct{}{})
	fake.recordInvocation("Snapshot", []interface{}{})
	fake.snapshotMutex.Unlock()
	if fake.SnapshotStub != nil {
		return fake.SnapshotStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.snapshotReturns.result1
}

func (fake *FakeGaugeFloat64) SnapshotCallCount() int {
	fake.snapshotMutex.RLock()
	defer fake.snapshotMutex.RUnlock()
	return len(fake.snapshotArgsForCall)
}

func (fake *FakeGaugeFloat64) SnapshotReturns(result1 metrics.GaugeFloat64) {
	fake.SnapshotStub = nil
	fake.snapshotReturns = struct {
		result1 metrics.GaugeFloat64
	}{result1}
}

func (fake *FakeGaugeFloat64) SnapshotReturnsOnCall(i int, result1 metrics.GaugeFloat64) {
	fake.SnapshotStub = nil
	if fake.snapshotReturnsOnCall == nil {
		fake.snapshotReturnsOnCall = make(map[int]struct {
			result1 metrics.GaugeFloat64
		})
	}
	fake.snapshotReturnsOnCall[i] = struct {
		result1 metrics.GaugeFloat64
	}{result1}
}

func (fake *FakeGaugeFloat64) Update(arg1 float64) {
	fake.updateMutex.Lock()
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 float64
	}{arg1})
	fake.recordInvocation("Update", []interface{}{arg1})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		fake.UpdateStub(arg1)
	}
}

func (fake *FakeGaugeFloat64) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeGaugeFloat64) UpdateArgsForCall(i int) float64 {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].arg1
}

func (fake *FakeGaugeFloat64) Value() float64 {
	fake.valueMutex.Lock()
	ret, specificReturn := fake.valueReturnsOnCall[len(fake.valueArgsForCall)]
	fake.valueArgsForCall = append(fake.valueArgsForCall, struct{}{})
	fake.recordInvocation("Value", []interface{}{})
	fake.valueMutex.Unlock()
	if fake.ValueStub != nil {
		return fake.ValueStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.valueReturns.result1
}

func (fake *FakeGaugeFloat64) ValueCallCount() int {
	fake.valueMutex.RLock()
	defer fake.valueMutex.RUnlock()
	return len(fake.valueArgsForCall)
}

func (fake *FakeGaugeFloat64) ValueReturns(result1 float64) {
	fake.ValueStub = nil
	fake.valueReturns = struct {
		result1 float64
	}{result1}
}

func (fake *FakeGaugeFloat64) ValueReturnsOnCall(i int, result1 float64) {
	fake.ValueStub = nil
	if fake.valueReturnsOnCall == nil {
		fake.valueReturnsOnCall = make(map[int]struct {
			result1 float64
		})
	}
	fake.valueReturnsOnCall[i] = struct {
		result1 float64
	}{result1}
}

func (fake *FakeGaugeFloat64) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.snapshotMutex.RLock()
	defer fake.snapshotMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	fake.valueMutex.RLock()
	defer fake.valueMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeGaugeFloat64) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ metrics.GaugeFloat64 = new(FakeGaugeFloat64)
